from typing import Final
from dotenv import load_dotenv
import os
import discord
from discord import Intents, Member
from discord.ext import commands
import nest_asyncio
from responses import get_faceit_stats
import asyncio
import random


# Zastosowanie poprawki dla kompatybilno≈õci asyncio w ≈õrodowiskach takich jak Jupyter
nest_asyncio.apply()

# Za≈Çadowanie zmiennych ≈õrodowiskowych z pliku .env
load_dotenv()

TOKEN: Final[str] = os.getenv('DISCORD_TOKEN')

# Definicja intent√≥w dla bota
intents: Intents = Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

# Inicjalizacja bota z intentami i prefiksem komendy
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.command()
async def ping(ctx, member: discord.Member):
    guild = ctx.guild

    if not member.voice or not member.voice.channel:
        await ctx.send(f"‚ÑπÔ∏è {member.display_name} nie jest aktualnie na kanale g≈Çosowym.")
        return

    original_channel = member.voice.channel

    # Lista wszystkich kana≈Ç√≥w g≈Çosowych opr√≥cz obecnego
    voice_channels = [c for c in guild.voice_channels if c != original_channel]

    if len(voice_channels) < 2:
        await ctx.send("‚ö†Ô∏è Potrzebne sƒÖ przynajmniej 3 kana≈Çy g≈Çosowe, ≈ºeby to dzia≈Ça≈Ço.")
        return

    # Losowe dwa kana≈Çy
    channels = random.sample(voice_channels, 2)

    await ctx.send(f"üéØ Przerzucanie {member.mention}...")

    try:
        for i in range(5):
            await member.move_to(channels[i % 2])
            await asyncio.sleep(1)

        await member.move_to(original_channel)
        await ctx.send(f"‚úÖ {member.display_name} wr√≥ci≈Ç(a) na sw√≥j kana≈Ç.")
    except discord.Forbidden:
        await ctx.send("‚ùå Nie mam uprawnie≈Ñ do przenoszenia tego u≈ºytkownika.")
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è WystƒÖpi≈Ç b≈ÇƒÖd: {e}")

# Komenda: Wy≈õwietlenie regulaminu
@bot.command()
async def regulamin(ctx):
    embed = discord.Embed(
        title="üìú Regulamin Serwera Discord",
        description="Poni≈ºej znajdziesz zasady, kt√≥re obowiƒÖzujƒÖ na naszym serwerze. Prosimy o ich przestrzeganie dla zachowania przyjaznej atmosfery.",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="1Ô∏è‚É£ Postanowienia Og√≥lne",
        value=(
            "1. Korzystanie z serwera oznacza akceptacjƒô niniejszego regulaminu.\n"
            "2. Administracja zastrzega sobie prawo do modyfikacji regulaminu.\n"
            "3. Nieznajomo≈õƒá regulaminu nie zwalnia u≈ºytkownika z jego przestrzegania."
        ),
        inline=False
    )
    
    embed.add_field(
        name="2Ô∏è‚É£ Zasady Og√≥lne",
        value=(
            "1. Szanuj innych u≈ºytkownik√≥w ‚Äì zakaz obra≈ºania, gro≈ºenia oraz dyskryminacji.\n"
            "2. Zabrania siƒô spamu, floodingu i wysy≈Çania niechcianych link√≥w.\n"
            "3. Publikowanie nieodpowiednich tre≈õci (np. mowy nienawi≈õci, brutalnych obraz√≥w) jest zabronione."
        ),
        inline=False
    )
    
    embed.add_field(
        name="3Ô∏è‚É£ Zasady DotyczƒÖce Nick√≥w i Avatar√≥w",
        value=(
            "1. Nicki i awatary nie mogƒÖ zawieraƒá tre≈õci obra≈∫liwych ani wulgarnych.\n"
            "2. Administracja mo≈ºe wymagaƒá zmiany nicku lub awatara, je≈õli sƒÖ one nieodpowiednie."
        ),
        inline=False
    )
    
    embed.add_field(
        name="4Ô∏è‚É£ Zasady Reklamy",
        value=(
            "1. Reklamowanie serwer√≥w, produkt√≥w lub us≈Çug jest dozwolone tylko za zgodƒÖ administracji.\n"
            "2. Zakaz wysy≈Çania reklam w prywatnych wiadomo≈õciach do innych u≈ºytkownik√≥w."
        ),
        inline=False
    )
    
    embed.add_field(
        name="5Ô∏è‚É£ Administracja i Moderacja",
        value=(
            "1. Decyzje administracji sƒÖ ostateczne.\n"
            "2. W razie problem√≥w kontaktuj siƒô z administracjƒÖ przez kana≈Ç 'Pomoc' lub prywatnƒÖ wiadomo≈õƒá.\n"
            "3. Nadu≈ºywanie funkcji ‚Äûpingowania‚Äù administracji jest zabronione."
        ),
        inline=False
    )
    
    embed.add_field(
        name="6Ô∏è‚É£ Sankcje",
        value=(
            "1. ≈Åamanie regulaminu mo≈ºe skutkowaƒá ostrze≈ºeniem, wyciszeniem, wyrzuceniem lub banem.\n"
            "2. Administracja ma prawo indywidualnie rozpatrywaƒá ka≈ºdy przypadek naruszenia zasad."
        ),
        inline=False
    )
    
    embed.add_field(
        name="7Ô∏è‚É£ Prywatno≈õƒá",
        value=(
            "1. Zabrania siƒô udostƒôpniania prywatnych informacji innych u≈ºytkownik√≥w bez ich zgody.\n"
            "2. Serwer nie gromadzi danych osobowych poza tymi wymaganymi przez Discord."
        ),
        inline=False
    )
    
    embed.set_footer(text="Dziƒôkujemy za przestrzeganie zasad i ≈ºyczymy mi≈Çego pobytu na serwerze! üòä")

    await ctx.send(embed=embed)

# Komenda: Sprawdzenia statystyk Faceit
@bot.command()
async def faceit(ctx, *, profile_url: str):
    """Wpisz !faceit <link do profilu FACEIT>, aby sprawdziƒá statystyki."""
    try:
        if "faceit.com" in profile_url or "faceittracker.net" in profile_url:
            player_name = profile_url.split("/")[-1]
        else:
            await ctx.send("Podano nieprawid≈Çowy link. U≈ºyj formatu: https://faceittracker.net/players/NICKNAME")
            return

        stats = get_faceit_stats(player_name)
        if not stats:
            await ctx.send("Nie uda≈Ço siƒô pobraƒá statystyki dla tego gracza. Sprawd≈∫, czy nick jest poprawny.")
            return

        embed = discord.Embed(title=f"**Statystyki FACEIT dla {player_name}**", color=0x00ff00)
        embed.add_field(name="Poziom", value=stats["level"], inline=True)
        embed.add_field(name="ELO", value=stats["elo"], inline=True)
        embed.add_field(name="Rozegrane mecze", value=stats["matches"], inline=True)
        embed.add_field(name="Win Rate", value=f"{stats['winrate']}", inline=True)
        embed.add_field(name="Headshot Rate", value=f"{stats['headshots']}", inline=True)
        embed.add_field(name="K/D Ratio", value=f"{stats['kd_ratio']}", inline=True)
        embed.add_field(name="**LAST 10 MATCHES**", value="", inline=False)
        embed.add_field(name="K/D Ratio", value=f"{stats['k/d_ratio_last_10']}", inline=True)
        embed.add_field(name="Wins", value=f"{stats['wins']}", inline=True)
        embed.add_field(name="Losses", value=f"{stats['losses']}", inline=True)
        embed.add_field(name="Results", value=f"{stats['last_10_results']}", inline=True)

        embed.set_footer(text="Statystyki dostarczone przez FaceitTracker.net")
        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania ≈ºƒÖdania.")
        print(e)

# Wydarzenie, kt√≥re jest wywo≈Çywane, gdy bot jest gotowy
@bot.event
async def on_ready() -> None:
    print(f'{bot.user} jest online')
    activity = discord.CustomActivity(name='Owner: kurzowskyy')
    await bot.change_presence(activity=activity)
    channel = bot.get_channel(1244337321608876042)
    if channel:
        await channel.send('Jestem online')

# Wydarzenie, kt√≥re jest wywo≈Çywane, gdy status u≈ºytkownika zmienia siƒô na online
@bot.event
async def on_presence_update(before: discord.Member, after: discord.Member):
    # ID r√≥l, kt√≥re chcemy monitorowaƒá
    monitored_roles = {1249508176722661416, 941320096452841572}

    # Sprawdzenie, czy u≈ºytkownik przeszed≈Ç ze statusu offline na online
    if before.status == discord.Status.offline and after.status != discord.Status.offline:
        # Sprawdzanie, czy u≈ºytkownik ma jednƒÖ z wymaganych r√≥l
        if any(role.id in monitored_roles for role in after.roles):
            # Pobieramy kana≈Ç, do kt√≥rego wysy≈Çamy wiadomo≈õƒá
            channel = after.guild.get_channel(1244337321608876042)
            if channel:
                await channel.send(f'{after.display_name} jest teraz online!')

# Komenda do zmiany pseudonimu u≈ºytkownika (wymaga uprawnie≈Ñ)
@bot.command(name='zmien_nick')
@commands.has_permissions(manage_nicknames=True)
async def change_nick(ctx, member: Member, *, new_nickname: str):
    try:
        old_nickname = member.display_name
        await member.edit(nick=new_nickname)
        await ctx.send(f'Pseudonim u≈ºytkownika {old_nickname} zosta≈Ç zmieniony na {new_nickname}')
    except discord.Forbidden:
        await ctx.send('Nie mam uprawnie≈Ñ do zmiany pseudonimu tego u≈ºytkownika.')
    except discord.HTTPException as e:
        await ctx.send(f'WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany pseudonimu: {e}')

blocked_nicknames = {}  # S≈Çownik do przechowywania blokowanych pseudonim√≥w {user_id: nick_to_block}

@bot.command()
@commands.has_permissions(administrator=True)
async def block_nickname(ctx, member: Member, nick: str):
    """Blokuje lub odblokowuje mo≈ºliwo≈õƒá zmiany pseudonimu dla konkretnego u≈ºytkownika."""
    if member.id in blocked_nicknames:
        del blocked_nicknames[member.id]
        await ctx.send(f'Odblokowano zmianƒô pseudonimu dla u≈ºytkownika {member.display_name}.')
    else:
        blocked_nicknames[member.id] = nick
        await ctx.send(f'Zablokowano zmianƒô pseudonimu dla u≈ºytkownika {member.display_name}. '
                       f'Pseudonim zostanie zmieniony na "{nick}" w przypadku pr√≥by edycji.')

# Wydarzenie wywo≈Çywane podczas zmiany pseudonimu u≈ºytkownika
@bot.event
async def on_member_update(before: Member, after: Member):
    """Zapobiega zmianie pseudonimu dla u≈ºytkownik√≥w znajdujƒÖcych siƒô na li≈õcie blokowanych."""
    if after.id in blocked_nicknames:
        blocked_nick = blocked_nicknames[after.id]
        if before.nick != after.nick:
            try:
                await after.edit(nick=blocked_nick)
                print(f'Zmieniono pseudonim u≈ºytkownika {after.display_name} na "{blocked_nick}".')
            except discord.Forbidden:
                print(f'Bot nie ma uprawnie≈Ñ do zmiany pseudonimu u≈ºytkownika {after.display_name}.')
            except discord.HTTPException as e:
                print(f'WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany pseudonimu u≈ºytkownika {after.display_name}: {e}')

# Uruchomienie bota z tokenem
def main() -> None:
    bot.run(token=TOKEN)

if __name__ == '__main__':
    main()
